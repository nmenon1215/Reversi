README:


OVERVIEW
This program serves to represent a Reversi game. A Reversi game is a 2 player game that utilizes
tiles and a board. The Reversi game represented in this program utilizes a board made of hexagons.
A move is legal if the tile placed by the player sandwiches the tile(s) of the other player, with
another of the player’s tile at the end. As the board is made of hexagons, tiles can be placed in 3
directions, horizontal, diagonal left to right, and diagonal right to left. A game is over if both
players pass consecutively, a player is out of tiles on the board, or the board is full. A game is
won by the player with the most pieces at the end of the game. A game always starts with the black
tile being placed first. This implementation assumes that the user has a base level knowledge of
coordinate systems and basic game strategy. Some forms of extensibility envisioned are multiple
players, as different Enumerations of players could be provided.



QUICK START
To start the program follow these basic steps:

1. Instantiate a basic game:
ReversiModel basicGame = new BasicReversi();
2. Then start the game with your desired side length. For this example we used 6:
basicGame.startGame(6);
3. To make moves use axial coordinates and the makeMove method. Here is an example:
basicGame.playerMove( 1, 1);
4. To pass a player’s turn use the pass method:
basicGame.playerPass();



KEY COMPONENTS
1. ReversiModel interface: represents the primary model of a Reversi game and playing methods to be
called during a game.

2. BasicReversi class: implements ReversiModel interface and represents a game of reversi. This
class implements methods that are called in a Reversi game and keeps track of important
information in a game. This class keeps track of the game board in the game, whether the game has
started, the current player turn, and the most recent moves made by a player. It alters the
gameboard and executes moves made by players.

3. ReversiTextualView class: this class represents a textual view of a reversi game model. In this
class, the components of the model are represented as strings. An empty cell in the game board is
displayed as “_”, while a cell occupied by a player is displayed as “X” for player x, and “O” for
player o. The textual view also holds the shape of the hexagonal game board. Is driven by the
changes made to the model in BasicReversi.

4. Player interface: represents the active players in the game who will eventually control the
model.

5. PlayerEnum enumeration: represents the type of players that can control a cell in a game of
Reversi. A PlayerEnum is one of: player x, player o, or an empty player to represent an empty cell.
This enumeration contains a toString method that is used for the textual view that represents each
player option as a string. PlayerEnum is implemented as a component of the game in BasicReversi.

6. HexagonCell class: represent a singular cell in a reversi game board. This class holds methods
on a cell, such as changing the state, and keeps track of important information about each cell.
The cell keeps track of the state, or what type of PlayerEnum occupies it, and its position in
axial coordinates, which represents its position on the hexagonal reversi game board. The cell is
used in BasicReversi as a representation of the physical board.




KEY SUBCOMPONENTS
1. Sidelength of a board represents the dimension of the hexagon in cells, as provided by the user,
and is used for creating the board.

2. The gameStarted field of the board controls if the game has been started and moves can be made.

3. The gameBoard is the physical board at any given time. Any “_” represents a point in the grid
where there is no tile. Any other character represents the tile of the player there.

4. TurnsTaken represents the two most recent consecutive moves. The boolean is false if the player
did not make a move and instead passed during their turn.

5. The model of the ReversiTextualView represents the current model displayed.

6. The state of a cell represents the player occupying the space. The axial coordinates show the
position of the tile on the board.



SOURCE ORGANIZATION
1. The PlayerEnum, ReversiModel, BasicReversi, and Player classes can all be found in the model
package in the source file.

2. The ReversiTextualView, the representation of the current board in string format, can be found
in the view package in the source file.

3. The HexagonCell class, which represents a cell of the board, can be found in the cell package
in the source file.



CHANGES FOR PART TWO
Updates for part two of Reversi include a read only model, a method in the model returning the
size of the board, and a method in the model checking valid moves. The ReadOnlyReversiModel
implementation changed the ReversiModel interface to extend the read only and X. The method
getBoardSideLength accomplishes the required behavior of getting the size of the board. The method
checkValid now checks if a move is valid for the current player.  The original getGameBoard method
was updated to return a version of the board that is an immutable copy. Updates to the board also
include methods that return information about the board (posnNextToCorner, posnInCorner,
countPiecesGained).




GUI KEY COMPONENTS
1. Hexagon class: this interface represents an image of a singular hexagon cell in the reversi
game board. The hexagon takes in a hexagonCell from the game board in the model, a boolean
isClicked, which keeps track of if the hexagon is selected, and x/y coordinates. These coordinates
represent the pixel coordinates of the center of the hexagon cell onto the screen. This class
contains methods to draw the hexagon and keeps track of the color that the hexagon should be,
as well as where on the board a hexagon should be.

2. FrameView interface: this interface represents the frame of the view of a Reversi game.

3. ReversiFrame class: this is a class that implements FrameView. This class adds the panel into
the frame, and add a model into the panel.

4. ReversiPanel interface: represents the inside of the panel in the Reversi game. This holds a
method to paint the model onto the screen.

5. PanelView class: this interface represents the panel, or everything on the screen, in a
ReversiGame. This class is responsible for setting the background color, adding all of the
hexagons from the game board onto the screen, and tracking the key and mouse events.



GUI SUBCOMPONENTS
1. sideLength represents the length, in pixels, of a singular hexagon on the board.

2. isClicked is a boolean that tracks if a cell is selected, which determines if the cell should
be highlighted.

3. boardWidth and boardHeight represent the bounds of the board, or the size of the window that
the game is in.




STRATEGY KEY COMPONENTS
1. Coord class: this class represents an axial coordinate on the reversi game board.

2. Strategy interface: this interface represents a strategy in a reversi game that helps a play
choose where to make a move. This guarantees a method, chooseCoord, that returns the coordinates
of the cell that a player should move to, depending on the strategy.

3. ReversiStrategy abstract class: this class implements Strategy. The method chooseCoord is
abstract, but this class contains several helper methods that are utilized in many of the
different types of strategies.

4. CaptureMostPieces class: this class extends ReversiStrategy. This class represents a strategy
where a player moves to whatever cell on the game board that gains them the most new pieces. The
chooseCoord method filters through all coordinates that are valid moves and returns the one that
gets the most new pieces. If there are no valid moves, the method returns null.

5. AvoidCorners class: this class extends ReversiStrategy. This represents a strategy where a
player avoids making a move to a cell that is next to a corner, to avoid giving the other player
an opportunity to move to a corner. The chooseCoord method filters out any cells that are next to
a corner and then picks the cell that gains the most new pieces. If there are no valid moves to
cells that are not next to corners, the method returns null.

6. GoForCorners class: this class extends ReversiStrategy. This represents a strategy where a
player attempts to make a move to a corner on the Reversi board. The method chooseCoord filters
out all the valid cells that are not in corners and then returns the corner cell that gains the
player the most new pieces. If there are no valid moves to any corner cells, the method returns
null.

7. TryTwo class: this class extends ReversiStrategy. This represents a strategy that combines
two other strategies. In the chooseCoord method, if the first strategy returns null, the method
will refer to the second strategy. This allows you to combine two or more strategies to make a
smarter strategy. If all strategies return null, the method will return null indicating a player
pass.




INDICATING A PLAYER MOVE AND PLAYER PASS

PLAYER MOVE: To indicate a player move, highlight the cell to move to and type “m”, “M”,
“/n” (enter key), or “ “ (space key). This will indicate a move to the selected cell, and will
deselect the cell. If the user tries to do this without selecting a cell first, the system will
print a message saying to select a cell first.

PLAYER PASS: To indicate a player pass, type “p” or “P”. This will deselect any selected cells,
if there are any.



CHANGES FOR PART THREE

REVISED UPDATES
All mentions of ArrayLists have been abstracted to be represented as Lists in the correct contexts.
The MockReversi class has been moved to the test directory to facilitate clarity in testing.
Comments and components were added as needed to preexisting code to improve readability.
Additionally, Features were included in the view design. The main method has now been adjusted to
include a command line prompt that takes in the types of players. If a specific size of the board
is desired, a user can input the number of side width first, followed by the two player types
desired. Otherwise, the board will default to a size of 6 and use the two types of players
indicated. AI players can be indicated by “easy”, “medium”, and “hard”, which have varying levels
of difficulty and use different strategies, as developed in part 2.

CONTROLLER COMPONENTS
ActivePlayer interface: This interface represents a player of the game. Notably, this interface
contains the method makeMove() which makes a move for the player, adjusting the model accordingly.
Additionally, the interface has the methods getPlayer and isHumanPlayer, which return information
about the player this interface represents.

ModelFeatures interface: This interface represents the possible player actions that can interact
with the model and affect the view. The update method updates the required visuals to represent
the updated model. The notifyPlayerTurn method alerts the player to their turn, or required action.
The makeMoveIfAI method correctly makes a move if the player is an AI player. The displayGameOver
method alters the display pending the end of the game.

ViewFeatures interface: This interface represents the possible player actions that interact with
the view and alter the model. ViewFeatures contains PlayerMove, which takes in a pair of integers
representing coordinates, and PlayerPass. PlayerMove moves the player to the indicated position on
the press of the correct key. PlayerPass has the player pass their turn when they press ‘p’.

PlayerFeatures interface: This interface performs player actions when it is a player’s turn. It is
primarily used for AI players, as no moves are made automatically for a human player. The
MakeAIMove and MakeAIPass methods are called when the controller checks if the player is AI and if
it is that player’s turn, and calls “player.makeMove().” This requires communication from the
model to the controller, to the player, back to the controller.


CONTROLLER USAGE
HumanPlayer class: This class implements the ActivePlayer interface. It represents a player that
is an active human player making move choices on its own. In the makeMove method the player makes
the move themselves.

AIPlayer class: This class implements the ActivePlayer interface. It represents an AI player that
decides moves based on its inherent strategy. In the makeMove method the player uses the strategy
to choose the coordinate of the desired piece on the board.

ReversiController class: This class implements the ModelFeatures, PlayerFeatures and ViewFeatures
interfaces. This allows a player to control a game of reversi. This class works by accepting
signals and communicating between the model, view, and players.
